import 'package:qoe_app/data/local/session_manager.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

import 'package:flutter/material.dart';
import 'package:qoe_app/models/device.dart'; 
import 'package:qoe_app/models/statistic.dart'; 

class DbMethods {
  final SupabaseClient _supabaseClient = Supabase.instance.client;

  /// Stores device information into the 'Device' table in Supabase.
  ///
  /// Takes a [device] object containing the device's details.
  /// The 'id' and 'created_at' fields of the Device object are ignored
  /// as they are auto-generated by Supabase.
  /// The [token] is automatically retrieved from the current Supabase session.
  ///
  /// Returns `true` if the operation is successful, `false` otherwise.
  Future<bool> storeDeviceInformation(Device device) async {
    if (SessionManager().hasRegisteredDevice()) return true;
    try {
      final String? sessionToken =
          _supabaseClient.auth.currentSession?.accessToken;

      if (sessionToken == null) {
        debugPrint(
          'Error: Supabase session token is null. User might not be authenticated.',
        );
        return false;
      }

      final Map<String, dynamic> dataToInsert = {
        ...device.toJson(), 
        'token': sessionToken,
      };

      // Perform the insert operation
      final List<Map<String, dynamic>> response =
          await _supabaseClient
              .from('Device')
              .insert(dataToInsert)
              .select(); 

      if (response.isNotEmpty) {
        SessionManager().setHasRegisteredDevice(true);
        SessionManager().setDeviceId(response.first['id']);
        return true;
      } else {
        debugPrint('Failed to store device information: Response was empty.');
        return false;
      }
    } catch (e, stackTrace) {
      debugPrint('Error storing device information: $e\n$stackTrace');
      return false;
    }
  }

  /// Stores network statistics into the 'NetworkStatistics' table in Supabase.
  ///
  /// Takes a [statistic] object containing the network statistics details.
  /// The 'id' and 'created_at' fields of the Statistic object are ignored
  /// as they are auto-generated by Supabase.
  ///
  /// Returns `true` if the operation is successful, `false` otherwise.
  Future<bool> storeNetworkStatistics(Statistic statistic) async {
    try {
      // Ensure deviceId is present as it's a foreign key and nullable in the model
      if (statistic.deviceId == null) {
        debugPrint(
          'Error: deviceId is null for network statistics. Cannot store.',
        );
        return false;
      }

      // Prepare the data to be inserted.
      // Omit 'id' and 'created_at' as they are auto-generated by Supabase.
      final Map<String, dynamic> dataToInsert = statistic.toJson();

      // Perform the insert operation
      final List<Map<String, dynamic>> response =
          await _supabaseClient
              .from('NetworkStatistics')
              .insert(dataToInsert)
              .select(); // Use .select() to return the inserted row(s)

      if (response.isNotEmpty) {
        debugPrint('Network statistics stored successfully: ${response.first}');
        return true;
      } else {
        debugPrint('Failed to store network statistics: Response was empty.');
        return false;
      }
    } catch (e, stackTrace) {
      debugPrint('Error storing network statistics: $e\n$stackTrace');
      return false;
    }
  }

  // You can add more methods here for fetching, updating, or deleting data
  // from your Supabase tables as needed.
}
